

PLANNED FEATURES (ABSOLUTE NECESSITY):

low-res startup
air, drag, thrust, deltaV, etc.
rotate with surface while landed
major moons, asteroids, comets for sure
nicer user interface (menus, info, more options)


RE-IMPLEMENTING DROPPED FEATURES:
constellation map
  this was dropped because it was based on a weird (bad) spherical projection,
  whereas now the best-practices skybox background is being used.
dynamic trajectory projection (not just an ellipse)
  (especially needed for hyperbolic trajectories)
  this was dropped because it was sloppy (weird catmull rom curve implementation)


MORE PLANNED FEATURES

assorted rocket models, using stats
multiple satellites
all ~200 moons hopefully
track any asteroid or object



POSSIBLE EXTRA FEATURES

adjustable scale









PROGRAM FLOW (simplified)


populate body array, conversions, mostMassiveBody
  cartes (local icrf)
threejs setup & objects, resize(), fullscreen()

systemPosition() LOOP BODY
viewControl
time



--- main loop ---

rocketControl()

nBodyVelocity() LOOP BODY
  spin planets
    define focus
    accelerate

keplerPosition() LOOP BODY
  cartes.xyz = -focusDistanceXYZ
  cartes.vxyz = vxyx - focus.vxyz
  cartes.vxyz -= focus acceleration
    icrfToEci()
      toKepler()
        if (!onSurface)
          meanAnom++
          j2++
      toCartes()
      if (Artificial)
        if (!onSurface)
          eciToEcef()
          ecefToGps()
          if (alt == 0)
            v 0,0,0 and onSurface = true
        if (onSurface)
          ecefToEci()
    eciToIcrf()

systemPosition() LOOP BODY
time++
displayText()

--- main loop ---

animate()
  drawEllipse
    toKepler()
      draw, position, and rotate ellipse
  navBall getDirections()
  camera
  render



VARIABLE          POSITION
body[i].x         universal icrf (solar system barycenter)
body[i].cartes.x  local icrf (when finished)
body[i].eci.x     local eci (if not commented out)
body[i].ecef.x    local ecef




BROWSER RENDERING

firefox mobile 68.11 setting that changes resolution:
layout.css.devPixelsPerPx
preferred resolution: 1.6

JavaScript
window.devicePixelRatio



ALTITUDE

gps tells you MSL: Mean Sea Level.
  it's accurate, even with oblate spheroids.

but it does NOT tell you the height of actual physical surface features, like mountains and valleys (which are not implemented)...











// shadow setup
if (focus === 0) {
// setup a DirectionalLight
// positioned outside if the furthest child
// in the direction of the sun, facing back


// rotate with parent
// attach independent child object at location of
// landing. set with rotation of rocket.
// copy that rotation. if the rocket is rotated
// manually then rotate the clone.












why the slowness:

  polygons, especially a 3d rocket model

  high res textures (and probably ~90% jpg quality) 
  
  loading all planets & moons with textures at the same time
  
  two scenes.. one just for the navball, with nice lighting
  
  orbit lines
    recalculating kepler and redrawing on every frame
    ellipse with 500 points
    

  loading the whole threejs instead of just modules?
    it may not make a difference

  processing data (instead of it being pre-processed)

  rockets are part of n-body physics

  gps velocity unnecessary

  general efficiency can probably be drastically improved




ISSUES

* couldn't launch from 401, went down instead
    need research

  earth's inclination.. to sun axes (equator) or ecliptic?


PHYSICS

* collision with surface graphics, with accurate gps
    bump/relief map w/collision detection.
    surface graphics and gps ARE accurate, if using
    1024 segments... so it just depends on segment
    heights.

  rotate with parent while landed

  fuel, weight, thrust, deltaV ratios

  atmosphere
    drag
    re-entry heat

  KNOWN & INTENDED HYPERBOLIC "SAFE CRASH"
    when iterations > 9999 to solve, forgetaboutit...
    need safe failout



GRAPHICS
  3d rocket model
  cloud layer
  sky color during daytime or in thick atmosphere
  shadows, especially for planet 6 rings
    use DirectionalLight or SpotLight near planet


USER INTERFACE
  load low-res, select hq maps

  gui buttons sizes mobile (normal) vs desktop etc

  loading screen
  show/hide axes (ship, planets, etc)
  show/hide sprites
  show/hide individual orbit lines
  brighten/dim ambient light

  navball
    prograde, radial, normal markers
      for eci
      for ecef
    target anti-target marker
    maneuver marker

  orbit line
    apo/peri/incl markers on orbit line
    draw nbody trajectory
    draw pure hyperbolic line (vs ellipse)
    make truAnom as starting point for ellipse
      so that the rocket always appears on the line?
      but then peri/apo points are not shown

  orbitcontrols option large bodies, min zoom, angle
    solve zoom difficulty issue
    solve pole angle issue

  real-time sync


MULTI
  multiple satellites, "inFlight" variable
  save/load state
    landing boosters
    docking & transfer of resources (fuel, etc)
  multiplayer
    send/receive orbit info
    login



SPACECRAFT
  spacecraft detail
    solar panels & power
    radiators & temperature
    life support
    reaction wheel
    rcs
    ignition count
  communications satellites
  different rockets
  staging
  buildable rockets
    shape, size, engine/fuel types
  eva & spacecraft repair and upgrades
  rovers (wheels & terrain physics)
  ion thrust & long-term acceleration


MULTIPLAYER WEB SERVER

client side
  orbital info is received
    view orbits (including your own)
  launch spacecraft
    orbital info is sent to server

server side
  run simulation 24/7 with thousands of orbits
  send orbit data upon request
  receive orbit data and update database



TRACKING IDEAS

spacecraft identifying info:
  country (based on ip address) & number
  launch date & time
  rocket type & number

TRACKING EXAMPLE:

1-USA-1-FALCON9-1
2019-01-19T13:16:30.000Z

2-USA-2-STARSHIP-SN8-1

SPACECRAFT UNIQUE ID: 1
ROCKET MODEL: FALCON 9 BLOCK 5
ROCKET SERIAL NUMBER: 1
PAYLOAD MODEL: (SATELLITE TYPE i.e. hubble)
PAYLOAD SERIAL NUMBER: 1

LAUNCH DATE: 2019-01-19T13:16:30.000Z
LAUNCHED FROM: KOUROU
LAUNCHPAD LAUNCH NUMBER: 1
LAUNCHPAD COUNTRY: FRENCH GUIANA (FRANCE)

MISSION CONTROL: MIAMI
MISSION CONTROL LAUNCH NUMBER: 1

COUNTRY OF ORIGIN: USA
COUNTRY OF ORIGIN LAUNCH NUMBER: 1


FLIGHT OPERATIONS LANGUAGE: ENGLISH
ONBOARD COMPUTER: ANDROID
LAUNCH NAVIGATION: FIREFOX
IP ADDRESS
BROWSER INFO





orbital speed at equator when surface speed is zero
va = 0.0000729211585454431
vt = va * distance
vt = 465.10113940155685


rings outer radius
140,180 + 235 = 140415

width 30 - 500?
(500-30)/2 = 235


SKYBOX

using CubeTextureLoader, to get z-up orientation:

starting with a nasa star map in hdri (sphere) format where: aries is in the center, the northvstar is on top, and orion is on the left:

upload to:
https://matheowis.github.io/HDRI-to-CubeMap/
and output zip of 6 single, non-rotated files.
the hdri break tool outputs files as follows:

NASA HDRI IMAGE          HDRI     Z-UP   slot rot.
left [orion]          -> nx.png   +y     3    180
bottom (below center) -> ny.png   -z     6    right
sides                 -> nz.png   -x     1    left
right                 -> px.png   -y     4    none
top (above center)    -> py.png   +z     5    right
center                -> pz.png   +x     2    right


extended reference:
the THREE.js CubeTextureLoader slot order is as follows:

slot1 = -x
slot2 = +x
slot3 = +y (above +z)
slot4 = -y (below +z)
slot5 = +z
slot6 = -z


notes on rocket models:

nice model, not centered, cheesy windows:
https://sketchfab.com/3d-models/spacex-starship-a8a0b69f776841a1a465cd9fb3762fd2

nice model, basically centered, wrong roll
https://sketchfab.com/3d-models/starship-mk1-5a708af84ef440c6a91f96c2b8284cc4




other notes:

"space station" commodore 64

https://discourse.threejs.org/t/collision-detection-with-3d-models/16662

https://stackoverflow.com/questions/52271397/centering-and-resizing-gltf-models-automatically-in-three-js

