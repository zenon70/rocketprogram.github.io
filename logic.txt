

# IN-PROGRESS
-------------

// dev9
remove throttleUp throttleDown buttons, need to change keyboard access

// dev8
firefox mobile: stop scrolling when using vertical slider

// dev2
save/load

launch from gps location or orbit, anywhere
  should avoid overlap
  can't launch from 90, see orbital mechanics issue

// dev4
tidal locking
301, 401, and 402 now dynamically oscillating
with the moon's angularVelocity changing wildly to face earth, how does that
affect spaceflight and landing?
use a-b point masses to represent tidal bulge, receive nbody velocity changes

// dev5
camera improvements



ORBITAL MECHANICS issue:
  #1 ECCENTRICITY too high at poles
  #2 issue with 0 or ~0 circular orbits
  glitchy when using custom kepler elements with 0 e, 0 i, 0 lan, 0 w, 0 M
  needs testing
  0 eccentricity definitely has issues
  0 inclination functions fine. lan resets at unexpected times, but it's ok.
  90 inclination ok
  180 inclination ok
  0 lan ok
  0 w ok
  0 M ok
  UPDATE: e 0 still not perfect, but way better. i 0 behavior unchanged
  still need real solution to e === 0
  launch from 89.9 lat glitchy, so i limited it to 89.5



# ON DECK
---------





# ISSUES
--------


gui
  hud numbers wrapping, and going outside of tinted background
  desktop orbital verbose data goes outside tinted background
  hud fuel overlaps on smartphone in widescreen if not fullscreened

hyperbolic to not hyperbolic, back and forth, "slows performance"?
  needs duplication
  couldn't duplicate

dispose
  check and confirm memory is not leaking, even after recycle
  dispose of sprite?


# IMPORTANT FEATURE REQUESTS
----------------------------


planet texture should always be below spacecraft, like launchpad


not rotating with surface while landed
  rotate with parent
  attach independent child object at location of landing.
  set with rotation of rocket. copy that rotation.
  if the rocket is rotated manually then rotate the clone.

camera should start UP, wherever you start
restore camera zoom level on view change?


not appearing on surface
  rotate earth mesh so rocket is at peak point?
  collision with surface graphics, with accurate gps
  surface graphics and gps ARE accurate??, if using
  1024 segments... so it just depends on segment
  heights.. use phi&theta to make sphere portion? how to texture?
    terrain: bump/relief map w/collision detection
    aerodynamics and negative altitude loss of momentum will need to be revised


rocket goes down when low thrust on surface


spacecraft rotation from warp is wrong.. requires "complicated formula".


simulation accuracy
  moons's sidereal should be 655hrs but it needs to got at about 640hrs to stay
    facing earth - why is it so far off?
    gravity of earth (mu)?
  ecliptic lan parameter of earth is off by almost precisely 90 deg, not sure why
    (ecliptic notes below) (may be perfectly ok)



# IMPORTANT GUI FEATURE REQUESTS
--------------------------------
onscreen data is tiny (hard to read) on desktop.. allow scaling?
make menu look nice, nicer user interface (font, menus, info, more options)
  gui buttons sizes mobile (normal) vs desktop etc
  make menu larger for big screens, ok for smaller screens?

firefox mobile 96.0.0-beta.5:
  exiting fullscreen doesn't resize properly
  scrolling to hide address bar causes screen to resize wrong
  using throttle slider scrolls screen

epiphany browser: near frustum culling

orbits toggles (all 3) can be toggled off when paused BUT not back on...
  seems like inconsistent behavior










===========================================================================
# CODE MAINENTANCE


# EFFICIENCY
------------

livestream crashes on 2gb phone, need super low-res startup, set hi-res maps
  running 9 planets and 3 moons and a sun and rocket.. is slow.. especially
  with orbit lines... so efficiency needs to be improved.
  
  
- loading all planets & moons with textures at the same time
- high res textures
- polygon count
- two scenes
- orbit lines
    recalculating some elements (i, lan, w) and redrawing on every frame
    ellipse with 500 points
- gps data for other rockets may be unnecessary unless current view object


- loading the whole threejs instead of just modules
    but i prefer console use (n/a with modules)



- using primitives instead of objects would help a tiny bit

- orbMech settings for transcendental equation

- processing space data (instead of it being pre-processed)




# CODE REFACTORING
------------------
use an actual convention for orbital parameter variable names
  like IAU or mpcorb or NASA or UCS.. whichever i want to import from most

improve body array naming system i.e. earth = 3 .name = 399,  planet4 = 4...

use a json object file for solar system orbit data

validate html5, css3, javascript
  html5 isn't valid due to vertical slider, and warns about non-resizability
  css3 is valid, and warns about vendor extensions
  js es6 - haven't found suitable linter that accepts paste from mobile browser

could use better organization of functions and globals


===========================================================================





# GENERAL FEATURE REQUESTS
--------------------------

collision detection so stages don't go through each other

calculate exact velocity at touchdown
calculate exact moment of touchdown

aerodynamics based on angle of incident
high wind speeds on foreign planets

re-entry heat

add galilean moons and outer moons that have atmospheres
  add major moons, asteroids, comets for sure, all ~200 moons hopefully

navball prograde, radial, normal markers for eci & ecef
  target anti-target marker
  maneuver marker



# CONTROLS & GUI
----------------
add impulse power for spin controls

have deltaV stats

show "maxq" on screen when passed

add orbitcontrols option for large bodies, with min zoom, compatible with tilt

add real-time sync (already coded in an old version)

translation controls


# 3D VISUALS
------------
first person camera

blowing up - graphics upon impact

visual clouds on a few planets: 299, 399, maybe 499, a few moons

sky color during daytime or in thick atmosphere, from camera location

shadows, especially for planet 6 rings
    use DirectionalLight or SpotLight near planet

constellation map

adjustable scale


# AUDIO
-------
const audio = new Audio('audio_file.mp3');
audio.volume = 0.2;
audio.play();




# SAVE / LOAD
-------------
select launch location

assorted rocket models, using stats

track any asteroid or object

save/load state
    landing boosters
    docking & transfer of resources (fuel, etc)
  multiplayer
    send/receive orbit info
    login
      intelligent automatic restore points

SPACECRAFT
  spacecraft detail
    solar panels & power
    radiators & temperature
    life support
    reaction wheel
    rcs
    ignition count
  communications satellites
  staging
  buildable rockets
    shape, size, engine/fuel types
  eva & spacecraft repair and upgrades
  rovers (wheels & terrain physics)
  ion thrust & long-term acceleration


MULTIPLAYER WEB SERVER
client side
  orbital info is received
    view orbits (including your own)
  launch spacecraft
    orbital info is sent to server
server side
  run simulation 24/7 with thousands of orbits
  send orbit data upon request
  receive orbit data and update database



# SATELLITE TRACKING
--------------------
spacecraft identifying info:
  country (based on ip address) & number
  launch date & time
  rocket type & number

TRACKING EXAMPLE:

1-USA-1-FALCON9-1
2019-01-19T13:16:30.000Z

2-USA-2-STARSHIP-SN8-1

SPACECRAFT UNIQUE ID: 1
ROCKET MODEL: FALCON 9 BLOCK 5
ROCKET SERIAL NUMBER: 1
PAYLOAD MODEL: (SATELLITE TYPE i.e. hubble)
PAYLOAD SERIAL NUMBER: 1

LAUNCH DATE: 2019-01-19T13:16:30.000Z
LAUNCHED FROM: KOUROU
LAUNCHPAD LAUNCH NUMBER: 1
LAUNCHPAD COUNTRY: FRENCH GUIANA (FRANCE)

MISSION CONTROL: MIAMI
MISSION CONTROL LAUNCH NUMBER: 1

COUNTRY OF ORIGIN: USA
COUNTRY OF ORIGIN LAUNCH NUMBER: 1


FLIGHT OPERATIONS LANGUAGE: ENGLISH
ONBOARD COMPUTER: ANDROID
LAUNCH NAVIGATION: FIREFOX
IP ADDRESS
BROWSER INFO


----------------------------------------------------------------













# PROGRAM FLOW (simplified logic) (old)
---------------------------------

starlightSlider.oninput = function()
sunlightSlider.oninput = function()
const popup, function menu(), function popup()

const GRAVITY

add planets (cartes: local icrf)
  process planet data (degrees to radians, flattening, etc)
add rocket (cartes: local icrf)
  set rocket location

assign mostMassiveBody (sun)

setup threejs
  renderer, scenes, cameras, controls
  add navBall
  setup resizability, fullscreen
  stars (changeable textures)
  earth (changeable textures)
  starlight
  add planets
  sunlight
  let view
  function addRocket()
  addRocket()

toggleSprites()
toggleRocketAxes()

function systemPosition()
body[mostMassiveBody].mesh.position.x = body[mostMassiveBody].x * scale;
systemPosition()

function cycleView()
cycleView()
time

rocket control initialization

--- begin main() loop ---

rocketControl()

nBodyVelocity() LOOP BODY
    define focus
    accelerate

keplerPosition() LOOP BODY
  cartes.xyz = -focusDistanceXYZ
  cartes.vxyz = vxyx - focus.vxyz           ALL/ROCKETS-ONLY
  cartes.vxyz -= focus acceleration
    icrfToEci()                             icrfToEci
      toKepler()                            toKepler
        if (!onSurface)
          meanAnom++
          j2++                              j2
      toCartes()                            toCartes
      spin planets
      if (Artificial)
        if (!onSurface)
          eciToEcef()                           eciToEcef ecefToGps gpsToEcef getDir
          ecefToGps()                           ecefToGps
          if (alt == 0)
            v 0,0,0 and onSurface = true
        if (onSurface)
          ecefToEci()                           ecefToEci ecefToGps gpsToEcef getDir
          drag equations...                     drag?
    eciToIcrf()                             eciToIcrf

<-- push new objects into body array here, right before systemPosition()

systemPosition() LOOP BODY
time++
displayText()

--- end main() loop ---

preAnimate()
  drawEllipse
    toKepler()                              toKepler
      draw, position, and rotate ellipse    new ellipse
  navBall getDirections()
  camera
  render




# VARIABLES
-----------

VARIABLE             FRAME   ORIGIN
body[i].x            icrf    solar system barycenter
body[i].cartes.x     icrf    center of mass of object being orbited
body[i].cartesEci.x  eci     center of mass of object being orbited
body[i].ecef.x       ecef    center of mass of object being orbited



# BROWSER RENDERING
-------------------
firefox mobile setting that changes resolution:
layout.css.devPixelsPerPx
preferred resolution: 1.6

JavaScript
window.devicePixelRatio






# NOTES
-------
orbital speed at equator when surface speed is zero
va = 0.0000729211585454431
vt = va * distance
vt = 465.10113940155685


planet6 rings outer radius
140,180 + 235 = 140415

width 30 - 500?
(500-30)/2 = 235


# SKYBOX
--------
using CubeTextureLoader, to get z-up orientation:

starting with a nasa star map in hdri (sphere) format where: aries is in the center, the northvstar is on top, and orion is on the left:

upload to:
https://matheowis.github.io/HDRI-to-CubeMap/
and output zip of 6 single, non-rotated files.
the hdri break tool outputs files as follows:

NASA HDRI IMAGE          HDRI     Z-UP   slot rot.
left [orion]          -> nx.png   +y     3    180
bottom (below center) -> ny.png   -z     6    right
sides                 -> nz.png   -x     1    left
right                 -> px.png   -y     4    none
top (above center)    -> py.png   +z     5    right
center                -> pz.png   +x     2    right


extended reference:
the THREE.js CubeTextureLoader slot order is as follows:

slot1 = -x
slot2 = +x
slot3 = +y (above +z)
slot4 = -y (below +z)
slot5 = +z
slot6 = -z






# ECLIPTIC NOTES
----------------
to convert from icrf to ecliptic, use icrfToEci() with:
ra = 270
dec = 66.56071
(but in radians)


ORBIT REFERENCE CONVENTIONS BY POPULARITY
the reference plane used to define the orbit...

1. for all non-sun-orbiters, is the...
  a) equatorial plane of object orbited
  ...
  b) laplace plane
  c) invariable plane
  ...
  d) others

2. for sun orbiters, is the...
  a) ecliptic iau76/80 from icrf J2000
  b) icrf J2000 frame plane
  c) equatorial plane of object orbited (sun)
  ...
  d) invariable plane
  e) la place plane
  f) galactic plane
  ...
  g) any other plane described by ra and dec

real
a 149665014.5
e 0.017118629067
i 0.0004181086
Ω 135.0807
ω 326.728218
M 358.617

simulated, ra 270 deg
2000-01-01T12:00:01.730Z
a 149657995.5553969
e 0.01707254539869325
i 0.0004173390204885836
Ω 224.97454174732968
ω 326.83819734893564
M 358.61347359311605
Ap 151517038.479
Pe 146406952.632
kms 30.292
v51

that's pretty good!  (but why is lan off?)

ra 180 deg:
2000-01-01T12:00:01.160Z
a 149657995.4082693
e 0.017072544425061596
i 32.672160809747325
Ω 222.53659617121215
ω 54.3479117263226
M 358.6134680371585
Ap 151517038.183
Pe 146406952.633
kms 30.292
v52

ra 90 deg
2000-01-01T12:00:00.980Z
a 149657995.36181194
e 0.017072544117620516
i 46.87828501752191
Ω 270.00040449516104
ω 101.8124613187117
M 358.6134662822681
Ap 151517038.090
Pe 146406952.633
kms 30.292
v52

ra 0 deg
2000-01-01T12:00:01.170Z
a 149657995.41085017
e 0.017072544442125397
i 32.67172570453659
Ω 317.46414331681217
ω 149.27694204782932
M 358.61346813668683
Ap 151517038.189
Pe 146406952.633
kms 30.292
v52




# OTHER NOTES
-------------
"space station" commodore 64




falcon 9 spacex.com
spaceflightinsider.com/hangar/falcon-9

COMPLETE
70 m
3.7 m (does NOT include fairing)


FAIRING
13.1 m tall
5.2 m wide

STAGE 2
397 burn
981000 N thrust vac
845000 N thrust sea
13.8 m tall

STAGE 1
162 burn
8227000 N thrust vac
7607000 N thrust sea
47.7 m tall (with inter)





# viewNext() and viewPrevious() logic
-------------------------------------

next is the object that's orbiting the same thing with the next highest periapsis,
unless the object being viewed has children, in which case the child with the lowest periapsis, unless THAT has its own children, etc.
or if there are no such things, the object that's orbiting the focus at the next highest periapsis,
or if there are no such things, the object that's orbiting THAT focus at the next highest periapsis
if there are no such things, then the thing that has no focus.

previous is the object that's orbiting the same thing with the next LOWEST periapsis,
or if that thing with the lower periapsis has children, the child with the highest periapsis,
or if THAT has children, then its child with the highest periapsis, etc.,
or if there are no such things, the focus,
or if there is no focus, then the thing that has the highest periapsis, unless it has children, in which case the child with the highest periapsis, unless it has children, etc.

easier logic for viewPrev():

look for something with the same focus, lower periapsis.
	if you find 2+ things, select the one with the highest periapsis
		found anything?
			yes: check if it has children
			no: the focus is the answer

checking if it has children:
repeat the steps above, using the new child object as the focus,
	with a lower periapsis than Infinity

what if the correct answer is the mostMassiveBody i.e. sun?
it works because it defaults out

what if the view object is the mostMassiveBody i.e. sun?
then use that as the focus, with tooHigh = Infinity.

what if there is only 1 thing to view?

what if there are no things to view?











# refactoring notes ~v100-110
-----------------------------



function openPopUpMenu()
function closePopUpMenu()

  
// set up three.js
camera.position.set(-200 * scale, 0 * scale, -350 * scale); // kourou
camera.up.set(0.62, -0.5, 2); // kourou

resize, fullscreen
starfield, starlight

function makeNaturalBodyGraphics()

function ChangeEarth()
cityLight


let view = 0;
function throttleShow() (depends on body[] and view)
function viewFinalize() (calls throttleShow())

function addRocketHelpers(i)
const f9...
function addFalconGraphics(rocket)


let pad = [];
function addLaunchPad(gps, i)


clouds
sprites
localAxes
ssbAxes

function systemPosition()


let timestep = 0.01;
function faster()
function slower()
let now = new Date(Date.UTC(2000, 0, 1, 12, 0, 0));

let spinPower = 0.1;
function up()
...

///////// NOW GETTING INTO THE MAIN PROGRAM...

function rocketControl()
function refuel()
function nBodyVelocity()
function keplerPosition()
function drawEllipse()

document.getElementById("eclipticPlane").checked = true;
let reportPlane = "ecliptic";
function setPlane()
function displayText()
function viewNext()
function viewPrevious()

functions for add rocket, stage sep, fairing sep, recycle

toggle orbits: all, local, single
function preAnimate();

function main();
function animate();


function initialize() {




makeNaturalBodyGraphics();

body[sun].sunlight = new THREE.PointLight(0xffffff, 1.5);
body[sun].mesh.add(body[sun].sunlight);

......
let mostMassiveBody = 0;
body[mostMassiveBody].x = body[mostMassiveBody].cartes.x;
  ...

addFalconGraphics(rocket); (calls viewFinalize())
body[rocket].pad = addLaunchPad(body[rocket].gps, body[rocket].focus);

body[mostMassiveBody].mesh.position.x = body[mostMassiveBody].x * scale;
body[mostMassiveBody].mesh.position.y = body[mostMassiveBody].y * scale;
body[mostMassiveBody].mesh.position.z = body[mostMassiveBody].z * scale;
systemPosition();

}
initialize()

main()
scene2.add(ambientLight2);
scene2.add(pointLight2);
scene2.add(navBall);
animate();
let loop = setInterval(main, 10);

let running = true;
function playPause()


# notes
-------
https://ccmc.gsfc.nasa.gov/modelweb/models_home.html


# custom lat lon gps
--------------------
index.html:
				<h3>Multiple Rockets</h3>



				<label for="lat">Latitude (-90 to 90):</label>
				<br>
				<input type="number" id="latNum" name="latitude" min="-90" max="90">

				<br>
				<label for="lat">Longitude (-180 to 180):</label>
				<br>
				<input type="number" id="lonNum" name="longitude" min="-180" max="180">

				<br>
				<select id="deployLocation">
					<option value="tour">Automatic Tour</option>
					<option value="kourou">Kourou, French Guiana</option>
					<option value="boca">Boca Chica, Texas</option>
					<option value="kennedy">LC-39A, Kennedy Space Center, Florida</option>
					<option value="baikonur">Baikonur Cosmodrome, Kazakhstan</option>
					<option value="random">Random GPS Location</option>
					<option value="custom">Custom (User Defined)</option>
				</select>



				<button class="inMenuButton" onclick="deploy()">deploy</button>

main.js:
let deployLocation = "tour";

bodies.js:

	// launch from ground
	{
		const i = rocket;
		let focus = body[i].focus;

		// automatic tour
		if (deployLocation === "tour") {
			if (rocketCount === 1) deployLocation = "kourou";
			else if (rocketCount === 2) deployLocation = "boca";
			else if (rocketCount === 3) deployLocation = "kennedy";
			else if (rocketCount === 4) deployLocation = "baikonur";
			else deployLocation = "random";
		}

		if (deployLocation === "kourou") {
			// guiana space center, kourou, french guiana
			body[i].gps = {
				lat: 5.236 * Math.PI / 180,
				lon: -52.775 * Math.PI / 180,
				alt: 0  // actual unknown
			};
		} else if (deployLocation === "boca") {
			// boca chica, texas
			body[i].gps = {
				lat: 25.997354305760496 * Math.PI / 180,
				lon: -97.15698039306052 * Math.PI / 180,
				alt: 0
			};
		} else if (deployLocation === "kennedy") {
			// kennedy launch pad 39a
			body[i].gps = {
				lat: 28.60838889 * Math.PI / 180,
				lon: -80.60444444 * Math.PI / 180,
				alt: 0
			};
		} else if (deployLocation === "baikonur") {
			// baikonur cosmodrome, kazakhstan
			body[i].gps = {
				lat: 45.92 * Math.PI / 180,
				lon: 63.342 * Math.PI / 180,
				alt: 0  // actually 90 meters, but this program doesn't have terrain yet
			};
		} else if (deployLocation === "custom" &&
			document.getElementById("latNum").value !== undefined &&
			document.getElementById("lonNum").value !== undefined) {
			let latDeg = document.getElementById("latNum").value;
			let lonDeg = document.getElementById("lonNum").value;
			body[i].gps = {
				lat: latDeg * Math.PI / 180,
				lon: lonDeg * Math.PI / 180,
				alt: 0  // actually 90 meters, but this program doesn't have terrain yet
			};
		} else {
			// deployLocation === "random"
			body[i].gps = {
				//lat: (Math.random() * (90 - -90) + -90) * Math.PI / 180,
				lat: (Math.acos(Math.random() * 2 - 1) - Math.PI / 2),
				lon: (Math.random() * (180 - -180) + -180) * Math.PI / 180,
				alt: 0
			};
		}


		camera.position.set(-200 * scale, 0 * scale, -350 * scale); // kourou
		camera.up.set(0.62, -0.5, 2); // kourou


		// convert to ecef then to cartes

style.css:
input[type="number"] {
	margin: 2%;
	padding: 2%;
	padding: 2%;
	color: #dddddd;
	background-color: rgba(55, 55, 55, 1);
	vertical-align: middle;
	accent-color: gray;
}


input[type="checkbox"] {
	margin: 2%;
	padding: 2%;
	width: 30px;
	height: 30px;
	padding: 2%;
	color: #dddddd;
	//background: rgba(0, 0, 0, 0);
	vertical-align: middle;
	accent-color: gray;
}

input[type="radio"] {
	margin: 2%;
	padding: 2%;
	width: 30px;
	height: 30px;
	padding: 2%;
	color: #dddddd;
	//background: rgba(0, 0, 0, 0);
	vertical-align: middle;
	accent-color: gray;
}


